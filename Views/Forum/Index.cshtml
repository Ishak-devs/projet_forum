@{
    ViewData["Title"] = "Forum de discussion";
    int classId = ViewBag.ClassId; // Récupération dynamique depuis le controller
}

<div class="container mt-4">
    <input class="form-control" type="hidden" id="classId" value="@classId" /> <!-- Champ caché pour l'ID de classe -->

    <h2 class="text-center mb-4">Forum de discussion</h2>
    <div class="input-group mb-3">
        <input type="text" id="messageInput" class="form-control" placeholder="Votre message" />
        <button id="sendButton" class="btn btn-primary">Envoyer</button>
    </div>
    <ul id="messagesList" class="list-group"></ul>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        // Initialisation de la connexion
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Warning)
            .build();

        // Réception des messages
        connection.on("ReceiveMessage", (user, message) => {
            const li = document.createElement("li");
            li.className = "list-group-item";
            li.innerHTML = `<strong>${user}:</strong> ${message}`;
            document.getElementById("messagesList").appendChild(li);
            scrollToBottom();
        });

        // Fonction pour faire défiler vers le bas
        function scrollToBottom() {
            const messagesList = document.getElementById("messagesList");
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        // Gestion des erreurs
        connection.onclose(async () => {
            await startConnection();
        });

        // Démarrer la connexion
        async function startConnection() {
            try {
                await connection.start();
                console.log("Connected to SignalR hub");

                const classId = parseInt(document.getElementById("classId").value);
                if (classId) {
                    await connection.invoke("LoadMessages", classId);
                }
            } catch (err) {
                console.error("Connection error:", err);
                setTimeout(startConnection, 5000);
            }
        }

        // Envoi de message
        async function sendMessage() { //fontion envoie de message
            const messageInput = document.getElementById("messageInput"); //On recupere l'input
            const message = messageInput.value.trim(); //On recupere le message
            const classId = parseInt(document.getElementById("classId").value); //On recupere la valeur de l'id de la classe concerné par le forum

            if (message && classId) { //Si message et classid existe
                try {
                    await connection.invoke("SendMessage", message, classId); 
                    messageInput.value = ""; //On affiche le message
                    messageInput.focus();
                } catch (err) { //On capture les erreurs
                    console.error("Error sending message:", err); //Afficher dans la console le message d'erreur
                }
            }
        }

        // Événements
        document.getElementById("sendButton").addEventListener("click", sendMessage); //Ajouter un ecouteur d'evenement pour le boutton d'envoi du message
        document.getElementById("messageInput").addEventListener("keypress", (e) => { 
            if (e.key === "Enter") sendMessage(); //Appeler sendmessage quand un message est envoyé
        });

        // Démarrer
        startConnection();
    </script>
}