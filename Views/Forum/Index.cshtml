@{
    ViewData["Title"] = "Forum de discussion";
    List<Details_classe>? classes = ViewBag.Classes;
}

<div class="container mt-4"> 

    <h2 class="forum-title text-center mb-4">Forum de discussion</h2>

    <div class="mb-3"> <!-- Marge en bas pour espacer du reste -->
        <label for="classSelect" class="form-label">Choisissez une classe :</label>
        <select value="" id="classSelect" name="classId" class="form-select" onchange="setClassId()">
            <option value="">-- Sélectionnez une classe --</option>
            @if (classes != null && classes.Any())
            {
                foreach (var classe in classes)
                {
                    <option value="@classe.Id_classe">@classe.Classe.classe</option>
                }
            }
        </select>
    </div>

    <!-- Zone d'affichage des messages avec style Bootstrap -->
    <div class="message-container border rounded p-3 mb-3 bg-light" id="messagesList" style="height: 400px; overflow-y: auto;">
        <!-- Les messages apparaîtront ici -->
        <p class="text-muted">Aucun message pour le moment.</p> <!-- Message par défaut si vide -->
    </div>

    <div class="input-group mb-3"> <!-- Input Group pour aligner input et bouton -->
        <input type="text" id="messageInput" class="form-control" placeholder="Écrivez votre message..." aria-label="Écrivez votre message" aria-describedby="sendButton"/> <!-- Input Bootstrap -->
        <button id="sendButton" class="btn btn-primary" type="button"> 
            <i class="fas fa-paper-plane"></i>
        </button>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/locale/fr.min.js"></script>
    <script>
        // Configuration de moment.js en français
        moment.locale('fr');

                const bannedWords =  [
           "idiot", "stupide", "connard",
            "conne", "merde", "salope", "pute", "crétin", "va te faire foutre",
            "espèce de", "enfoiré", "salopard", "fils de pute", "bâtard", "chier",
            "trou du cul", "pédé","pute", "tdc", "con", "conne", "cretin", 
            "raciste", "homophobe", "xénophobe", "putain", "bordel", "enculé", "fdp", "ntr", "blc", "couille", "couilles", "encule", "negre", "pede", "pd", "batard", "nike ta mere"
        ];
        

                        function containsBannedWords(message) {
            const lowerCaseMessage = message.toLowerCase();
            return bannedWords.some(word => lowerCaseMessage.includes(word.toLowerCase()));
        }


        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Warning)
            .build();

        const messagesList = document.getElementById("messagesList"); // Get reference once
        const messageInput = document.getElementById("messageInput");
        const classSelect = document.getElementById("classSelect");
        const sendButton = document.getElementById("sendButton");

        connection.on("ReceiveMessage", (user, message, timestamp, isCurrentUser) => {
            const currentClassId = parseInt(classSelect.value);

            const messageElement = createMessageElement(user, message, timestamp, isCurrentUser);
            messagesList.appendChild(messageElement);
            scrollToBottom();
        });

        connection.on("LoadMessages", (messages) => {
            messagesList.innerHTML = ''; // Clear existing messages

            if (!messages || messages.length === 0) {
                // Optionnel : Afficher un message si aucune conversation n'est chargée
                messagesList.innerHTML = '<p class="text-center text-muted p-3">Sélectionnez une classe pour voir les messages ou soyez le premier à en envoyer un.</p>';
                return;
            }

            messages.forEach(msg => {
                // Assurez-vous que votre objet 'msg' contient bien 'isCurrentUser'
                // Ceci doit être défini côté serveur lors de la récupération/envoi des messages
                const isCurrentUser = msg.isCurrentUser;
                const messageElement = createMessageElement(msg.user, msg.message, msg.timestamp, isCurrentUser);
                messagesList.appendChild(messageElement);
            });

            scrollToBottom();
        });
        
        function createMessageElement(user, message, timestamp, isCurrentUser) {
            // 1. Conteneur externe pour l'alignement (utilise Flexbox)
            const messageWrapper = document.createElement("div");
            messageWrapper.classList.add("d-flex", "mb-3"); // `d-flex` pour activer flex, `mb-3` pour l'espacement vertical

            if (isCurrentUser) {
                messageWrapper.classList.add("justify-content-end"); // Aligne à droite pour l'utilisateur actuel
            } else {
                messageWrapper.classList.add("justify-content-start"); // Aligne à gauche pour les autres
            }

            // 2. La "bulle" de message interne
            const messageBubble = document.createElement("div");
            messageBubble.classList.add("p-2", "rounded", "shadow-sm"); // Padding, coins arrondis, petite ombre
            messageBubble.style.maxWidth = '75%'; // Empêche la bulle d'être trop large

            if (isCurrentUser) {
                messageBubble.classList.add("bg-primary", "text-white"); // Fond bleu, texte blanc
            } else {
                messageBubble.classList.add("bg-white", "text-dark"); // Fond blanc, texte noir (contraste avec bg-light du conteneur)
                // Alternative: messageBubble.classList.add("bg-secondary", "text-white");
            }

            // 3. Contenu du message
            const messageContent = document.createElement("div");
            messageContent.textContent = message;
            // Vous pouvez ajouter des classes ici si nécessaire, par ex. pour la taille de police

            // 4. Informations (Utilisateur et Heure)
            const messageInfo = document.createElement("div");
            messageInfo.classList.add("small", "mt-1"); // Petite taille de texte, marge au-dessus
            if (isCurrentUser) {
                messageInfo.classList.add("text-white-50"); // Texte légèrement atténué sur fond bleu
                messageInfo.textContent = `Vous • ${moment(timestamp).format('LT')}`; // Format plus court pour l'heure
            } else {
                messageInfo.classList.add("text-muted"); // Texte gris standard
                messageInfo.textContent = `${user} • ${moment(timestamp).format('LLL')}`; // Format date + heure
            }
            // Optionnel: aligner le texte info à droite dans la bulle
            // messageInfo.classList.add("text-end");


            // 5. Assemblage des éléments
            messageBubble.appendChild(messageContent);
            messageBubble.appendChild(messageInfo);
            messageWrapper.appendChild(messageBubble);

            return messageWrapper;
        }

        function scrollToBottom() {
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        async function startConnection() {
            try {
                await connection.start();
                console.log("Connected to SignalR hub");
                // Charger les messages pour la classe sélectionnée (si une est déjà sélectionnée au chargement)
                // Ou appeler setClassId() qui le fera.
                await setClassId();

            } catch (err) {
                console.error("Connection error:", err);
                // Afficher un message d'erreur à l'utilisateur dans la zone de message ?
                messagesList.innerHTML = '<p class="text-center text-danger p-3">Impossible de se connecter au chat. Réessai dans 5 secondes...</p>';
                setTimeout(startConnection, 5000);
            }
        }

        async function setClassId() {
            // Vider la liste des messages actuels
            messagesList.innerHTML = '<p class="text-center text-muted p-3">Chargement des messages...</p>'; // Message pendant le chargement

            const classId = parseInt(classSelect.value);

            // Désactiver l'input et le bouton si aucune classe n'est sélectionnée
            const disableInput = !classId;
            messageInput.disabled = disableInput;
            sendButton.disabled = disableInput;
            messageInput.placeholder = disableInput ? "Sélectionnez une classe pour discuter" : "Écrivez votre message...";


            if (classId && connection.state === signalR.HubConnectionState.Connected) {
                try {
                    await connection.invoke("LoadMessages", classId);
                } catch (err) {
                    console.error("Error loading messages:", err);
                    messagesList.innerHTML = '<p class="text-center text-danger p-3">Erreur lors du chargement des messages.</p>';
                }
            } else if (!classId) {
                messagesList.innerHTML = '<p class="text-center text-muted p-3">Sélectionnez une classe pour commencer à discuter.</p>';
            } else {
                // Gérer le cas où la connexion n'est pas encore établie (devrait être géré par startConnection)
                console.warn("Attempted to load messages but connection not ready.");
                messagesList.innerHTML = '<p class="text-center text-warning p-3">Connexion au chat en cours...</p>';
            }
        }

        async function sendMessage() {
            const message = messageInput.value.trim();
            const classId = parseInt(classSelect.value);

                if (containsBannedWords(message)) {
            alert("Ce message contient des mots inappropriés et ne peut pas être envoyé.");
            messageInput.value = ""; // Vider l'input
            return; // Bloquer l'envoi du message
        }

            // Vérifier si connecté, s'il y a un message et une classe sélectionnée
            if (message && classId && connection.state === signalR.HubConnectionState.Connected) {
                // Désactiver temporairement pour éviter double envoi
                messageInput.disabled = true;
                sendButton.disabled = true;

                try {
                    await connection.invoke("SendMessage", message, classId);
                    messageInput.value = ""; // Vider l'input après envoi réussi
                } catch (err) {
                    console.error("Error sending message:", err);
                    // Informer l'utilisateur ? (par exemple, avec une alerte ou un message temporaire)
                    alert("Erreur lors de l'envoi du message.");
                } finally {
                    // Réactiver toujours l'input et le bouton
                    messageInput.disabled = false;
                    sendButton.disabled = false;
                    messageInput.focus(); // Remettre le focus sur l'input
                }
            } else if (!classId) {
                // Rappeler à l'utilisateur de sélectionner une classe
                // Peut-être faire "trembler" le sélecteur de classe ?
                classSelect.focus();
                alert("Veuillez sélectionner une classe avant d'envoyer un message.");
            } else if (!message) {
                messageInput.focus(); // Remettre le focus s'il n'y a pas de message
            }
        }

        // --- Event Listeners ---
        sendButton.addEventListener("click", sendMessage);
        messageInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault(); // Empêche le comportement par défaut (qui pourrait être une soumission de formulaire)
                sendMessage();
            }
        });
        // Recharger les messages quand la classe change
        classSelect.addEventListener("change", setClassId);


        // --- Initialisation ---
        // Désactiver l'input au début jusqu'à ce qu'une classe soit sélectionnée
        messageInput.disabled = true;
        sendButton.disabled = true;
        messageInput.placeholder = "Sélectionnez une classe pour discuter";
        messagesList.innerHTML = '<p class="text-center text-muted p-3">Connexion en cours...</p>'; // Message initial

        startConnection();

    </script>
}